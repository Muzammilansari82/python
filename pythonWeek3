# class animal:
#     name=''

#     def eat(self):
#         print("animal is eating")
# class birds:
#     def fly(self):
#         print("birds is flying")

# class child(animal,birds):
#     def __init__(self):
#         print("this is oop")
#     def sleep(self):
#         print("sparow is sleep")
#     def run(self):
#         print("fox is running")

# child1=child()
# print(child1.fly())
# print(child1.run())
# print(child1.eat())
# print(child1.sleep())

# class c:
#     name=''
#     a=200
#     def check(self):
        
#        print("c")  if c.a==20 else print("error")
#     b=200
# class anything1:
#     def recheck(self):
        
#      print("anything") if c.b==20 else print("again error")

# class any(c,anything1):
#    def run(self):
#      print("complte")if c.a==c.b else print("phir se error")

# abc=any()
# print(abc.check())
# print(abc.recheck())
# print(abc.run())

# import numpy as np

# a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], float)

# print(a)

# b = np.array([[1, 2, 3], [4, 5, 6]], float)
# print(b.shape)
# print(b.reshape(3, 2))

# b = np.array([1, 2, 3, 4, 5, 6])
# d = np.array([7, 8, 9, 10, 11, 12])

# a = b
# c = b.copy()
# b[0] = 2
# print(b)
# print(c)
# if b.any() == a.any() :print("equal")
# else: print("not equal")
# print("equal") if np.array_equal(b, d)  else print("not equal")

# con = np.concatenate((b, d))
# print(con)

# stc = np.stack((b, d), axis=1)
# print(stc)

# a=int(input("Number of elements in the array:-"))
# n=list(map(int, input("elements of array:-").strip()))
# print(n)



task complete


dic1 = {'1': {'course': 'python', 'time': '9 to 11',
#               'key': {'date': '16/06/2023'}},
#         '2': {'course': 'php', 'time': '11 to 1',
#               'key': {'date': '16/06/2023'}}}


# for p in dic1:
#     if p  == "key":
#             break
#     print(p)
    
#     for q in dic1[p]:

#         if q  == "key":
#             break
#         print(q)
#         print(dic1[p][q])


#     for m in dic1[p][q]:

#         print(dic1[p][q][m])
        
# # i=  (dic1[p][q])   
# # x = (dic1[p][q][m])

# # a = ((m), ':', (dic1[p][q][m]))
    
      
